// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package calc

import (
	"errors"
	"fmt"
	"math/big"
	"strconv"

	"github.com/ava-labs/subnet-evm/vmerrs"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/precompile/contract"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	CalcDiffGasCost uint64 = contract.WriteGasCostPerSlot /* SET A GAS COST HERE */
	CalcSumGasCost  uint64 = contract.WriteGasCostPerSlot /* SET A GAS COST HERE */
	GetDiffGasCost  uint64 = contract.ReadGasCostPerSlot  /* SET A GAS COST HERE */
	GetSumGasCost   uint64 = contract.ReadGasCostPerSlot  /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// CalcRawABI contains the raw ABI of Calc contract.
	//go:embed contract.abi
	CalcRawABI string

	CalcABI = contract.ParseABI(CalcRawABI)

	CalcPrecompile = createCalcPrecompile()
)

type CalcDiffInput struct {
	A *big.Int
	B *big.Int
}

type CalcSumInput struct {
	A *big.Int
	B *big.Int
}

// UnpackCalcDiffInput attempts to unpack [input] as CalcDiffInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackCalcDiffInput(input []byte) (CalcDiffInput, error) {
	inputStruct := CalcDiffInput{}
	// The strict mode in decoding is disabled after DUpgrade. You can re-enable by changing the last argument to true.
	err := CalcABI.UnpackInputIntoInterface(&inputStruct, "calcDiff", input, false)

	return inputStruct, err
}

// PackCalcDiff packs [inputStruct] of type CalcDiffInput into the appropriate arguments for calcDiff.
func PackCalcDiff(inputStruct CalcDiffInput) ([]byte, error) {
	return CalcABI.Pack("calcDiff", inputStruct.A, inputStruct.B)
}

func calcDiff(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, CalcDiffGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the CalcDiffInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackCalcDiffInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	rez := inputStruct.A.Uint64() - inputStruct.B.Uint64()
	StoreDiff(accessibleState.GetStateDB(), rez)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// UnpackCalcSumInput attempts to unpack [input] as CalcSumInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackCalcSumInput(input []byte) (CalcSumInput, error) {
	inputStruct := CalcSumInput{}
	// The strict mode in decoding is disabled after DUpgrade. You can re-enable by changing the last argument to true.
	err := CalcABI.UnpackInputIntoInterface(&inputStruct, "calcSum", input, false)

	return inputStruct, err
}

// PackCalcSum packs [inputStruct] of type CalcSumInput into the appropriate arguments for calcSum.
func PackCalcSum(inputStruct CalcSumInput) ([]byte, error) {
	return CalcABI.Pack("calcSum", inputStruct.A, inputStruct.B)
}

var (
	sumKey  = common.BytesToHash([]byte("sumKey"))
	diffKey = common.BytesToHash([]byte("diffKey"))
)

func StoreSum(stateDB contract.StateDB, sum uint64) {
	sumStr := strconv.Itoa(int(sum))
	inputPadded := common.LeftPadBytes([]byte(sumStr), common.HashLength)
	inputHash := common.BytesToHash(inputPadded)

	stateDB.SetState(ContractAddress, sumKey, inputHash)
}

func StoreDiff(stateDB contract.StateDB, diff uint64) {
	diffStr := strconv.Itoa(int(diff))
	inputPadded := common.LeftPadBytes([]byte(diffStr), common.HashLength)
	inputHash := common.BytesToHash(inputPadded)

	stateDB.SetState(ContractAddress, diffKey, inputHash)
}

func GetSum(stateDB contract.StateDB) (uint64, error) {
	value := stateDB.GetState(ContractAddress, sumKey)
	valueString := string(common.TrimLeftZeroes(value.Bytes()))
	valueInt, err := strconv.Atoi(valueString)
	if err != nil {
		return 0, err
	}

	return uint64(valueInt), nil
}

func GetDiff(stateDB contract.StateDB) (uint64, error) {
	value := stateDB.GetState(ContractAddress, diffKey)
	valueString := string(common.TrimLeftZeroes(value.Bytes()))
	valueInt, err := strconv.Atoi(valueString)
	if err != nil {
		return 0, err
	}

	return uint64(valueInt), nil
}

func calcSum(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, CalcSumGasCost); err != nil {
		return nil, 0, err
	}
	if readOnly {
		return nil, remainingGas, vmerrs.ErrWriteProtection
	}
	// attempts to unpack [input] into the arguments to the CalcSumInput.
	// Assumes that [input] does not include selector
	// You can use unpacked [inputStruct] variable in your code
	inputStruct, err := UnpackCalcSumInput(input)
	if err != nil {
		return nil, remainingGas, err
	}

	// CUSTOM CODE STARTS HERE
	rez := inputStruct.A.Uint64() + inputStruct.B.Uint64()
	StoreSum(accessibleState.GetStateDB(), rez)

	// this function does not return an output, leave this one as is
	packedOutput := []byte{}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// PackGetDiff packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetDiff() ([]byte, error) {
	return CalcABI.Pack("getDiff")
}

// PackGetDiffOutput attempts to pack given result of type *big.Int
// to conform the ABI outputs.
func PackGetDiffOutput(result *big.Int) ([]byte, error) {
	return CalcABI.PackOutput("getDiff", result)
}

// UnpackGetDiffOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetDiffOutput(output []byte) (*big.Int, error) {
	res, err := CalcABI.Unpack("getDiff", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func getDiff(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetDiffGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE
	diff, err := GetDiff(accessibleState.GetStateDB())
	if err != nil {
		return nil, 0, err
	}

	output := big.NewInt(int64(diff))
	packedOutput, err := PackGetDiffOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// PackGetSum packs the include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGetSum() ([]byte, error) {
	return CalcABI.Pack("getSum")
}

// PackGetSumOutput attempts to pack given result of type *big.Int
// to conform the ABI outputs.
func PackGetSumOutput(result *big.Int) ([]byte, error) {
	return CalcABI.PackOutput("getSum", result)
}

// UnpackGetSumOutput attempts to unpack given [output] into the *big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGetSumOutput(output []byte) (*big.Int, error) {
	res, err := CalcABI.Unpack("getSum", output)
	if err != nil {
		return new(big.Int), err
	}
	unpacked := *abi.ConvertType(res[0], new(*big.Int)).(**big.Int)
	return unpacked, nil
}

func getSum(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
	if remainingGas, err = contract.DeductGas(suppliedGas, GetSumGasCost); err != nil {
		return nil, 0, err
	}
	// no input provided for this function

	// CUSTOM CODE STARTS HERE
	sum, err := GetSum(accessibleState.GetStateDB())
	if err != nil {
		return nil, 0, err
	}

	output := big.NewInt(int64(sum))
	packedOutput, err := PackGetSumOutput(output)
	if err != nil {
		return nil, remainingGas, err
	}

	// Return the packed output and the remaining gas
	return packedOutput, remainingGas, nil
}

// createCalcPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createCalcPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"calcDiff": calcDiff,
		"calcSum":  calcSum,
		"getDiff":  getDiff,
		"getSum":   getSum,
	}

	for name, function := range abiFunctionMap {
		method, ok := CalcABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
